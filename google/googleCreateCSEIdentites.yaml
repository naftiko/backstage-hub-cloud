apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: googleCreateCSEIdentites
  description: >-
    Creates and configures a client-side encryption identity that's authorized
    to send mail from the user account. Google publishes the S/MIME certificate
    to a shared domain-wide directory so that people within a Google Workspace
    organization can encrypt and send mail to the identity.
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Create Cse Identites
      description: >-
        Creates and configures a client-side encryption identity that's authorized
        to send mail from the user account. Google publishes the S/MIME certificate
        to a shared domain-wide directory so that people within a Google Workspace
        organization can encrypt and send mail to the identity.
    paths:
      /gmail/v1/users/{userId}/settings/cse/identities:
        post:
          summary: Create Cse Identites
          description: >-
            Creates and configures a client-side encryption identity that's
            authorized to send mail from the user account. Google publishes the
            S/MIME certificate to a shared domain-wide directory so that people
            within a Google Workspace organization can encrypt and send mail to the
            identity.
          operationId: googleCreateCSEIdentites
          requestBody:
            content:
              application/json:
                schema:
                  type: object
                  example:
                    emailAddress: aliquip quis id
                    primaryKeyPairId: in exercitation esse
                    signAndEncryptKeyPairs:
                      signingKeyPairId: est deserunt
                      encryptionKeyPairId: elit nulla esse ut
          responses:
            '200':
              description: OK
              headers:
                Content-Type:
                  schema:
                    type: string
                    example: application/json
              content:
                application/json:
                  schema:
                    type: object
                  example:
                    emailAddress: aliquip quis id
                    primaryKeyPairId: in exercitation esse
                    signAndEncryptKeyPairs:
                      signingKeyPairId: est deserunt
                      encryptionKeyPairId: elit nulla esse ut
