apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Post Subscriptions Subscription_exposed_id
  description: >-
    Updates an existing subscription to match the specified parameters.When
    changing prices or quantities, we optionally prorate the price we charge
    next month to make up for any price changes.To preview how the proration is
    calculated, use the upcoming invoice endpoint.By default, we prorate
    subscription changes. For example, if a customer signs up on May 1 for a 100
    price, they’ll be billed 100 immediately. If on May 15 they switch to a 200
    price, then on June 1 they’ll be billed 250 (200 for a renewal of her
    subscription, plus a 50 prorating adjustment for half of the previous
    month’s 100 difference). Similarly, a downgrade generates a credit that is
    applied to the next invoice. We also prorate when you make quantity
    changes.Switching prices does not normally change the billing date or
    generate an immediate charge unless:The billing interval is changed (for
    example, from monthly to yearly).The subscription moves from free to paid,
    or paid to free.A trial starts or ends.In these cases, we apply a credit for
    the unused time on the previous price, immediately charge the customer using
    the new price, and reset the billing date.If you want to charge for an
    upgrade immediately, pass proration_behavior as always_invoice to create
    prorations, automatically invoice the customer for those proration
    adjustments, and attempt to collect payment. If you pass create_prorations,
    the prorations are created but not automatically invoiced. If you want to
    bill the customer for the prorations before the subscription’s renewal date,
    you need to manually invoice the customer.If you don’t want to prorate, set
    the proration_behavior option to none. With this option, the customer is
    billed 100 on May 1 and 200 on June 1. Similarly, if you set
    proration_behavior to none when switching between different billing
    intervals (for example, from monthly to yearly), we don’t generate any
    credits for the old subscription’s unused time. We still reset the billing
    date and bill immediately for the new subscription.Updating the quantity on
    a subscription many times in an hour may result in rate limiting. If you
    need to bill for a frequently changing quantity, consider integrating
    usage-based billing instead.
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Post Subscriptions Subscription_exposed_id
      description: >-
        Updates an existing subscription to match the specified parameters.When
        changing prices or quantities, we optionally prorate the price we charge
        next month to make up for any price changes.To preview how the proration is
        calculated, use the upcoming invoice endpoint.By default, we prorate
        subscription changes. For example, if a customer signs up on May 1 for a 100
        price, they’ll be billed 100 immediately. If on May 15 they switch to a 200
        price, then on June 1 they’ll be billed 250 (200 for a renewal of her
        subscription, plus a 50 prorating adjustment for half of the previous
        month’s 100 difference). Similarly, a downgrade generates a credit that is
        applied to the next invoice. We also prorate when you make quantity
        changes.Switching prices does not normally change the billing date or
        generate an immediate charge unless:The billing interval is changed (for
        example, from monthly to yearly).The subscription moves from free to paid,
        or paid to free.A trial starts or ends.In these cases, we apply a credit for
        the unused time on the previous price, immediately charge the customer using
        the new price, and reset the billing date.If you want to charge for an
        upgrade immediately, pass proration_behavior as always_invoice to create
        prorations, automatically invoice the customer for those proration
        adjustments, and attempt to collect payment. If you pass create_prorations,
        the prorations are created but not automatically invoiced. If you want to
        bill the customer for the prorations before the subscription’s renewal date,
        you need to manually invoice the customer.If you don’t want to prorate, set
        the proration_behavior option to none. With this option, the customer is
        billed 100 on May 1 and 200 on June 1. Similarly, if you set
        proration_behavior to none when switching between different billing
        intervals (for example, from monthly to yearly), we don’t generate any
        credits for the old subscription’s unused time. We still reset the billing
        date and bill immediately for the new subscription.Updating the quantity on
        a subscription many times in an hour may result in rate limiting. If you
        need to bill for a frequently changing quantity, consider integrating
        usage-based billing instead.
    paths:
      /v1/subscriptions/{subscription_exposed_id}:
        post:
          summary: Post Subscriptions Subscription_exposed_id
          description: >-
            Updates an existing subscription to match the specified parameters.When
            changing prices or quantities, we optionally prorate the price we charge
            next month to make up for any price changes.To preview how the proration
            is calculated, use the upcoming invoice endpoint.By default, we prorate
            subscription changes. For example, if a customer signs up on May 1 for a
            100 price, they’ll be billed 100 immediately. If on May 15 they switch
            to a 200 price, then on June 1 they’ll be billed 250 (200 for a renewal
            of her subscription, plus a 50 prorating adjustment for half of the
            previous month’s 100 difference). Similarly, a downgrade generates a
            credit that is applied to the next invoice. We also prorate when you
            make quantity changes.Switching prices does not normally change the
            billing date or generate an immediate charge unless:The billing interval
            is changed (for example, from monthly to yearly).The subscription moves
            from free to paid, or paid to free.A trial starts or ends.In these
            cases, we apply a credit for the unused time on the previous price,
            immediately charge the customer using the new price, and reset the
            billing date.If you want to charge for an upgrade immediately, pass
            proration_behavior as always_invoice to create prorations, automatically
            invoice the customer for those proration adjustments, and attempt to
            collect payment. If you pass create_prorations, the prorations are
            created but not automatically invoiced. If you want to bill the customer
            for the prorations before the subscription’s renewal date, you need to
            manually invoice the customer.If you don’t want to prorate, set the
            proration_behavior option to none. With this option, the customer is
            billed 100 on May 1 and 200 on June 1. Similarly, if you set
            proration_behavior to none when switching between different billing
            intervals (for example, from monthly to yearly), we don’t generate any
            credits for the old subscription’s unused time. We still reset the
            billing date and bill immediately for the new subscription.Updating the
            quantity on a subscription many times in an hour may result in rate
            limiting. If you need to bill for a frequently changing quantity,
            consider integrating usage-based billing instead.
          operationId: postSubscriptionsSubscriptionExposedId
          requestBody:
            content:
              application/x-www-form-urlencoded:
                encoding:
                  add_invoice_items:
                    explode: true
                    style: deepObject
                  automatic_tax:
                    explode: true
                    style: deepObject
                  billing_thresholds:
                    explode: true
                    style: deepObject
                  cancel_at:
                    explode: true
                    style: deepObject
                  cancellation_details:
                    explode: true
                    style: deepObject
                  default_source:
                    explode: true
                    style: deepObject
                  default_tax_rates:
                    explode: true
                    style: deepObject
                  description:
                    explode: true
                    style: deepObject
                  expand:
                    explode: true
                    style: deepObject
                  items:
                    explode: true
                    style: deepObject
                  metadata:
                    explode: true
                    style: deepObject
                  on_behalf_of:
                    explode: true
                    style: deepObject
                  pause_collection:
                    explode: true
                    style: deepObject
                  payment_settings:
                    explode: true
                    style: deepObject
                  pending_invoice_item_interval:
                    explode: true
                    style: deepObject
                  transfer_data:
                    explode: true
                    style: deepObject
                  trial_end:
                    explode: true
                    style: deepObject
                  trial_settings:
                    explode: true
                    style: deepObject
                schema:
                  additionalProperties: false
                  $ref: >-
                    #/components/schemas/PostSubscriptionsSubscriptionExposedIdRequest
          responses:
            default:
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/error'
              description: Error response.
