apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Get Monthly Usage Attribution
  description: >-
    Get monthly usage attribution. Multi-region data is available starting March
    1, 2023.This API endpoint is paginated. To make sure you receive all
    records, check if the value of `next_record_id` isset in the response. If it
    is, make another request and pass `next_record_id` as a parameter.Pseudo
    code example:```response := GetMonthlyUsageAttribution(start_month)cursor :=
    response.metadata.pagination.next_record_idWHILE cursor != null BEGIN 
    sleep(5 seconds)  # Avoid running into rate limit  response :=
    GetMonthlyUsageAttribution(start_month, next_record_id=cursor)  cursor :=
    response.metadata.pagination.next_record_idEND```
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Get Monthly Usage Attribution
      description: >-
        Get monthly usage attribution. Multi-region data is available starting March
        1, 2023.This API endpoint is paginated. To make sure you receive all
        records, check if the value of `next_record_id` isset in the response. If it
        is, make another request and pass `next_record_id` as a parameter.Pseudo
        code example:```response := GetMonthlyUsageAttribution(start_month)cursor :=
        response.metadata.pagination.next_record_idWHILE cursor != null BEGIN 
        sleep(5 seconds)  # Avoid running into rate limit  response :=
        GetMonthlyUsageAttribution(start_month, next_record_id=cursor)  cursor :=
        response.metadata.pagination.next_record_idEND```
    paths:
      /api/v1/usage/monthly-attribution:
        get:
          summary: Get Monthly Usage Attribution
          description: >-
            Get monthly usage attribution. Multi-region data is available starting
            March 1, 2023.This API endpoint is paginated. To make sure you receive
            all records, check if the value of `next_record_id` isset in the
            response. If it is, make another request and pass `next_record_id` as a
            parameter.Pseudo code example:```response :=
            GetMonthlyUsageAttribution(start_month)cursor :=
            response.metadata.pagination.next_record_idWHILE cursor != null BEGIN 
            sleep(5 seconds)  # Avoid running into rate limit  response :=
            GetMonthlyUsageAttribution(start_month, next_record_id=cursor)  cursor
            := response.metadata.pagination.next_record_idEND```
          operationId: getmonthlyusageattribution
          responses:
            '429':
              description: Too Many Requests
              headers:
                Content-Type:
                  schema:
                    type: string
                    example: application/json;datetime-format=rfc3339
              content:
                application/json:
                  schema:
                    type: object
                  example:
                    errors:
                      - Bad Request
                      - Bad Request
