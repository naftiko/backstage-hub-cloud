apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Archive Issue(s) By Jql
  description: >-
    Enables admins to archive up to 100,000 issues in a single request using
    JQL, returning the URL to check the status of the submitted request.You can
    use the [get
    task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get)
    and [cancel
    task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post)
    APIs to manage the request.**Note that:** *  you can't archive subtasks
    directly, only through their parent issues *  you can only archive issues
    from software, service management, and business
    projects**[Permissions](#permissions) required:** Jira admin or site admin:
    [global permission](https://confluence.atlassian.com/x/x4dKLg)**License
    required:** Premium or Enterprise**Signed-in users only:** This API can't be
    accessed anonymously.**Rate limiting:** Only a single request per jira
    instance can be active at any given time.  
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Archive Issue(s) By Jql
      description: >-
        Enables admins to archive up to 100,000 issues in a single request using
        JQL, returning the URL to check the status of the submitted request.You can
        use the [get
        task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get)
        and [cancel
        task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post)
        APIs to manage the request.**Note that:** *  you can't archive subtasks
        directly, only through their parent issues *  you can only archive issues
        from software, service management, and business
        projects**[Permissions](#permissions) required:** Jira admin or site admin:
        [global permission](https://confluence.atlassian.com/x/x4dKLg)**License
        required:** Premium or Enterprise**Signed-in users only:** This API can't be
        accessed anonymously.**Rate limiting:** Only a single request per jira
        instance can be active at any given time.  
    paths:
      /rest/api/3/issue/archive:
        post:
          summary: Archive Issue(s) By Jql
          description: >-
            Enables admins to archive up to 100,000 issues in a single request using
            JQL, returning the URL to check the status of the submitted request.You
            can use the [get
            task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get)
            and [cancel
            task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post)
            APIs to manage the request.**Note that:** *  you can't archive subtasks
            directly, only through their parent issues *  you can only archive
            issues from software, service management, and business
            projects**[Permissions](#permissions) required:** Jira admin or site
            admin: [global
            permission](https://confluence.atlassian.com/x/x4dKLg)**License
            required:** Premium or Enterprise**Signed-in users only:** This API
            can't be accessed anonymously.**Rate limiting:** Only a single request
            per jira instance can be active at any given time.  
          operationId: archiveIssuesAsync
          requestBody:
            description: >-
              A JQL query specifying the issues to archive. Note that subtasks can
              only be archived through their parent issues.
            required: true
            content:
              application/json:
                example:
                  jql: project = FOO AND updated < -2y
                schema:
                  $ref: '#/components/schemas/ArchiveIssueAsyncRequest'
          responses:
            '412':
              content:
                application/json:
                  example: >-
                    {"errorMessages":["An issue archival task is already running
                    with ID 1010. To start a new one, cancel the task or wait for it
                    to finish."],"errors":{}}
              description: Returned if a request to archive issue(s) is already running.
