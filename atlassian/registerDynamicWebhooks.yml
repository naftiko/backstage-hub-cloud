apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Register Dynamic Webhooks
  description: >-
    Registers webhooks.**NOTE:** for non-public OAuth apps, webhooks are
    delivered only if there is a match between the app owner and the user who
    registered a dynamic webhook.**[Permissions](#permissions) required:** Only
    [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps)
    and [OAuth
    2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps)
    apps can use this operation.
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Register Dynamic Webhooks
      description: >-
        Registers webhooks.**NOTE:** for non-public OAuth apps, webhooks are
        delivered only if there is a match between the app owner and the user who
        registered a dynamic webhook.**[Permissions](#permissions) required:** Only
        [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps)
        and [OAuth
        2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps)
        apps can use this operation.
    paths:
      /rest/api/3/webhook:
        post:
          summary: Register Dynamic Webhooks
          description: >-
            Registers webhooks.**NOTE:** for non-public OAuth apps, webhooks are
            delivered only if there is a match between the app owner and the user
            who registered a dynamic webhook.**[Permissions](#permissions)
            required:** Only
            [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps)
            and [OAuth
            2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps)
            apps can use this operation.
          operationId: registerDynamicWebhooks
          requestBody:
            required: true
            content:
              application/json:
                example:
                  url: https://your-app.example.com/webhook-received
                  webhooks:
                    - events:
                        - jira:issue_created
                        - jira:issue_updated
                      fieldIdsFilter:
                        - summary
                        - customfield_10029
                      jqlFilter: project = PROJ
                    - events:
                        - jira:issue_deleted
                      jqlFilter: project IN (PROJ, EXP) AND status = done
                    - events:
                        - issue_property_set
                      issuePropertyKeysFilter:
                        - my-issue-property-key
                      jqlFilter: project = PROJ
                schema:
                  $ref: '#/components/schemas/WebhookRegistrationDetails'
          responses:
            '403':
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorCollection'
              description: Returned if the caller isn't an app.
