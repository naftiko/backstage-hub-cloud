apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Create A Commit By Uploading A File
  description: >-
    This endpoint is used to create new commits in the repository byuploading
    files.To add a new file to a repository:```$ curl
    https://api.bitbucket.org/2.0/repositories/username/slug/src \  -F
    /repo/path/to/image.png=@image.png```This will create a new commit on top of
    the main branch, inheriting thecontents of the main branch, but adding (or
    overwriting) the`image.png` file to the repository in the `/repo/path/to`
    directory.To create a commit that deletes files, use the `files`
    parameter:```$ curl
    https://api.bitbucket.org/2.0/repositories/username/slug/src \  -F
    files=/file/to/delete/1.txt \  -F files=/file/to/delete/2.txt```You can
    add/modify/delete multiple files in a request. Rename/move afile by deleting
    the old path and adding the content at the new path.This endpoint accepts
    `multipart/form-data` (as in the examples above),as well as
    `application/x-www-form-urlencoded`.Note: `multipart/form-data` is currently
    not supported by Forge appsfor this API.#### multipart/form-dataA
    `multipart/form-data` post contains a series of "form fields" thatidentify
    both the individual files that are being uploaded, as well asadditional,
    optional meta data.Files are uploaded in file form fields (those that have
    a`Content-Disposition` parameter) whose field names point to the remotepath
    in the repository where the file should be stored. Path fieldnames are
    always interpreted to be absolute from the root of therepository, regardless
    whether the client uses a leading slash (as theabove `curl` example
    did).File contents are treated as bytes and are not decoded as text.The
    commit message, as well as other non-file meta data for therequest, is sent
    along as normal form field elements. Meta data fieldsshare the same
    namespace as the file objects. For `multipart/form-data`bodies that should
    not lead to any ambiguity, as the`Content-Disposition` header will contain
    the `filename` parameter todistinguish between a file named "message" and
    the commit message field.#### application/x-www-form-urlencodedIt is also
    possible to upload new files using a
    simple`application/x-www-form-urlencoded` POST. This can be convenient
    whenuploading pure text files:```$ curl
    https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src \ 
    --data-urlencode "/path/to/me.txt=Lorem ipsum." \  --data-urlencode
    "message=Initial commit" \  --data-urlencode "author=Erik van Zijst
    "```There could be a field name clash if a client were to upload a filenamed
    "message", as this filename clashes with the meta data propertyfor the
    commit message. To avoid this and to upload files whose namesclash with the
    meta data properties, use a leading slash for the files,e.g. `curl
    --data-urlencode "/message=file contents"`.When an explicit slash is omitted
    for a file whose path matches that ofa meta data parameter, then it is
    interpreted as meta data, not as afile.#### Executables and linksWhile this
    API aims to facilitate the most common use cases, it ispossible to perform
    some more advanced operations like creating a newsymlink in the repository,
    or creating an executable file.Files can be supplied with a `x-attributes`
    value in the`Content-Disposition` header. For example, to upload an
    executablefile, as well as create a symlink from `README.txt` to
    `README`:```--===============1438169132528273974==Content-Type: text/plain;
    charset="us-ascii"MIME-Version: 1.0Content-Transfer-Encoding:
    7bitContent-ID: "bin/shutdown.sh"Content-Disposition: attachment;
    filename="shutdown.sh";
    x-attributes:"executable"#!/bin/shhalt--===============1438169132528273974==Content-Type:
    text/plain; charset="us-ascii"MIME-Version: 1.0Content-Transfer-Encoding:
    7bitContent-ID: "/README.txt"Content-Disposition: attachment;
    filename="README.txt";
    x-attributes:"link"README--===============1438169132528273974==--```Links
    are files that contain the target path and have`x-attributes:"link"`
    set.When overwriting links with files, or vice versa, the newly uploadedfile
    determines both the new contents, as well as the attributes. Thatmeans
    uploading a file without specifying `x-attributes="link"` willcreate a
    regular file, even if the parent commit hosted a symlink atthe same path.The
    same applies to executables. When modifying an existing executablefile, the
    form-data file element must include`x-attributes="executable"` in order to
    preserve the executable statusof the file.Note that this API does not
    support the creation or manipulation ofsubrepos / submodules.
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Create A Commit By Uploading A File
      description: >-
        This endpoint is used to create new commits in the repository byuploading
        files.To add a new file to a repository:```$ curl
        https://api.bitbucket.org/2.0/repositories/username/slug/src \  -F
        /repo/path/to/image.png=@image.png```This will create a new commit on top of
        the main branch, inheriting thecontents of the main branch, but adding (or
        overwriting) the`image.png` file to the repository in the `/repo/path/to`
        directory.To create a commit that deletes files, use the `files`
        parameter:```$ curl
        https://api.bitbucket.org/2.0/repositories/username/slug/src \  -F
        files=/file/to/delete/1.txt \  -F files=/file/to/delete/2.txt```You can
        add/modify/delete multiple files in a request. Rename/move afile by deleting
        the old path and adding the content at the new path.This endpoint accepts
        `multipart/form-data` (as in the examples above),as well as
        `application/x-www-form-urlencoded`.Note: `multipart/form-data` is currently
        not supported by Forge appsfor this API.#### multipart/form-dataA
        `multipart/form-data` post contains a series of "form fields" thatidentify
        both the individual files that are being uploaded, as well asadditional,
        optional meta data.Files are uploaded in file form fields (those that have
        a`Content-Disposition` parameter) whose field names point to the remotepath
        in the repository where the file should be stored. Path fieldnames are
        always interpreted to be absolute from the root of therepository, regardless
        whether the client uses a leading slash (as theabove `curl` example
        did).File contents are treated as bytes and are not decoded as text.The
        commit message, as well as other non-file meta data for therequest, is sent
        along as normal form field elements. Meta data fieldsshare the same
        namespace as the file objects. For `multipart/form-data`bodies that should
        not lead to any ambiguity, as the`Content-Disposition` header will contain
        the `filename` parameter todistinguish between a file named "message" and
        the commit message field.#### application/x-www-form-urlencodedIt is also
        possible to upload new files using a
        simple`application/x-www-form-urlencoded` POST. This can be convenient
        whenuploading pure text files:```$ curl
        https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src \ 
        --data-urlencode "/path/to/me.txt=Lorem ipsum." \  --data-urlencode
        "message=Initial commit" \  --data-urlencode "author=Erik van Zijst
        "```There could be a field name clash if a client were to upload a filenamed
        "message", as this filename clashes with the meta data propertyfor the
        commit message. To avoid this and to upload files whose namesclash with the
        meta data properties, use a leading slash for the files,e.g. `curl
        --data-urlencode "/message=file contents"`.When an explicit slash is omitted
        for a file whose path matches that ofa meta data parameter, then it is
        interpreted as meta data, not as afile.#### Executables and linksWhile this
        API aims to facilitate the most common use cases, it ispossible to perform
        some more advanced operations like creating a newsymlink in the repository,
        or creating an executable file.Files can be supplied with a `x-attributes`
        value in the`Content-Disposition` header. For example, to upload an
        executablefile, as well as create a symlink from `README.txt` to
        `README`:```--===============1438169132528273974==Content-Type: text/plain;
        charset="us-ascii"MIME-Version: 1.0Content-Transfer-Encoding:
        7bitContent-ID: "bin/shutdown.sh"Content-Disposition: attachment;
        filename="shutdown.sh";
        x-attributes:"executable"#!/bin/shhalt--===============1438169132528273974==Content-Type:
        text/plain; charset="us-ascii"MIME-Version: 1.0Content-Transfer-Encoding:
        7bitContent-ID: "/README.txt"Content-Disposition: attachment;
        filename="README.txt";
        x-attributes:"link"README--===============1438169132528273974==--```Links
        are files that contain the target path and have`x-attributes:"link"`
        set.When overwriting links with files, or vice versa, the newly uploadedfile
        determines both the new contents, as well as the attributes. Thatmeans
        uploading a file without specifying `x-attributes="link"` willcreate a
        regular file, even if the parent commit hosted a symlink atthe same path.The
        same applies to executables. When modifying an existing executablefile, the
        form-data file element must include`x-attributes="executable"` in order to
        preserve the executable statusof the file.Note that this API does not
        support the creation or manipulation ofsubrepos / submodules.
    paths:
      /repositories/{workspace}/{repo_slug}/src:
        post:
          summary: Create A Commit By Uploading A File
          description: >-
            This endpoint is used to create new commits in the repository
            byuploading files.To add a new file to a repository:```$ curl
            https://api.bitbucket.org/2.0/repositories/username/slug/src \  -F
            /repo/path/to/image.png=@image.png```This will create a new commit on
            top of the main branch, inheriting thecontents of the main branch, but
            adding (or overwriting) the`image.png` file to the repository in the
            `/repo/path/to` directory.To create a commit that deletes files, use the
            `files` parameter:```$ curl
            https://api.bitbucket.org/2.0/repositories/username/slug/src \  -F
            files=/file/to/delete/1.txt \  -F files=/file/to/delete/2.txt```You can
            add/modify/delete multiple files in a request. Rename/move afile by
            deleting the old path and adding the content at the new path.This
            endpoint accepts `multipart/form-data` (as in the examples above),as
            well as `application/x-www-form-urlencoded`.Note: `multipart/form-data`
            is currently not supported by Forge appsfor this API.####
            multipart/form-dataA `multipart/form-data` post contains a series of
            "form fields" thatidentify both the individual files that are being
            uploaded, as well asadditional, optional meta data.Files are uploaded in
            file form fields (those that have a`Content-Disposition` parameter)
            whose field names point to the remotepath in the repository where the
            file should be stored. Path fieldnames are always interpreted to be
            absolute from the root of therepository, regardless whether the client
            uses a leading slash (as theabove `curl` example did).File contents are
            treated as bytes and are not decoded as text.The commit message, as well
            as other non-file meta data for therequest, is sent along as normal form
            field elements. Meta data fieldsshare the same namespace as the file
            objects. For `multipart/form-data`bodies that should not lead to any
            ambiguity, as the`Content-Disposition` header will contain the
            `filename` parameter todistinguish between a file named "message" and
            the commit message field.#### application/x-www-form-urlencodedIt is
            also possible to upload new files using a
            simple`application/x-www-form-urlencoded` POST. This can be convenient
            whenuploading pure text files:```$ curl
            https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src \ 
            --data-urlencode "/path/to/me.txt=Lorem ipsum." \  --data-urlencode
            "message=Initial commit" \  --data-urlencode "author=Erik van Zijst
            "```There could be a field name clash if a client were to upload a
            filenamed "message", as this filename clashes with the meta data
            propertyfor the commit message. To avoid this and to upload files whose
            namesclash with the meta data properties, use a leading slash for the
            files,e.g. `curl --data-urlencode "/message=file contents"`.When an
            explicit slash is omitted for a file whose path matches that ofa meta
            data parameter, then it is interpreted as meta data, not as afile.####
            Executables and linksWhile this API aims to facilitate the most common
            use cases, it ispossible to perform some more advanced operations like
            creating a newsymlink in the repository, or creating an executable
            file.Files can be supplied with a `x-attributes` value in
            the`Content-Disposition` header. For example, to upload an
            executablefile, as well as create a symlink from `README.txt` to
            `README`:```--===============1438169132528273974==Content-Type:
            text/plain; charset="us-ascii"MIME-Version:
            1.0Content-Transfer-Encoding: 7bitContent-ID:
            "bin/shutdown.sh"Content-Disposition: attachment;
            filename="shutdown.sh";
            x-attributes:"executable"#!/bin/shhalt--===============1438169132528273974==Content-Type:
            text/plain; charset="us-ascii"MIME-Version:
            1.0Content-Transfer-Encoding: 7bitContent-ID:
            "/README.txt"Content-Disposition: attachment; filename="README.txt";
            x-attributes:"link"README--===============1438169132528273974==--```Links
            are files that contain the target path and have`x-attributes:"link"`
            set.When overwriting links with files, or vice versa, the newly
            uploadedfile determines both the new contents, as well as the
            attributes. Thatmeans uploading a file without specifying
            `x-attributes="link"` willcreate a regular file, even if the parent
            commit hosted a symlink atthe same path.The same applies to executables.
            When modifying an existing executablefile, the form-data file element
            must include`x-attributes="executable"` in order to preserve the
            executable statusof the file.Note that this API does not support the
            creation or manipulation ofsubrepos / submodules.
          operationId: createacommitbyuploadingafile
          responses:
            '404':
              description: If the repository does not exist.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/error'
