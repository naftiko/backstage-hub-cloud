apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Get Available Workflow Capabilities
  description: >-
    Get the list of workflow capabilities for a specific workflow using either
    the workflow ID, or the project and issue type ID pair. The response
    includes the scope of the workflow, defined as global/project-based, and a
    list of project types that the workflow is scoped to. It also includes all
    rules organised into their broad categories (conditions, validators,
    actions, triggers, screens) as well as the source location
    (Atlassian-provided, Connect, Forge).**[Permissions](#permissions)
    required:** *  *Administer Jira* project permission to access all, including
    global-scoped, workflows *  *Administer projects* project permissions to
    access project-scoped workflowsThe current list of Atlassian-provided
    rules:#### Validators ####A validator rule that checks if a user has the
    required permissions to execute the transition in the workflow.#####
    Permission validator #####A validator rule that checks if a user has the
    required permissions to execute the transition in the workflow.    {      
    "ruleKey": "system:check-permission-validator",       "parameters":
    {         "permissionKey": "ADMINISTER_PROJECTS"       }     }Parameters: * 
    `permissionKey` The permission required to perform the transition. Allowed
    values: [built-in Jira
    permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).#####
    Parent or child blocking validator #####A validator to block the child
    issue\\u2019s transition depending on the parent issue\\u2019s status.   
    {       "ruleKey" : "system:parent-or-child-blocking-validator"      
    "parameters" : {         "blocker" : "PARENT"         "statusIds" :
    "1,2,3"       }     }Parameters: *  `blocker` currently only supports
    `PARENT`. *  `statusIds` a comma-separated list of status IDs.##### Previous
    status validator #####A validator that checks if an issue has transitioned
    through specified previous status(es) before allowing the current transition
    to occur.    {       "ruleKey": "system:previous-status-validator",      
    "parameters": {         "previousStatusIds": "10014",        
    "mostRecentStatusOnly": "true"       }     }Parameters: * 
    `previousStatusIds` a comma-separated list of status IDs, currently only
    support one ID. *  `mostRecentStatusOnly` when `true` only considers the
    most recent status for the condition evaluation. Allowed values: `true`,
    `false`.##### Validate a field value #####A validation that ensures a
    specific field's value meets the defined criteria before allowing an issue
    to transition in the workflow.Depending on the rule type, the result will
    vary:###### Field required ######    {       "ruleKey":
    "system:validate-field-value",       "parameters": {         "ruleType":
    "fieldRequired",         "fieldsRequired": "assignee",        
    "ignoreContext": "true",         "errorMessage": "An assignee must be
    set!"       }     }Parameters: *  `fieldsRequired` the ID of the field that
    is required. For a custom field, it would look like `customfield_123`. * 
    `ignoreContext` controls the impact of context settings on field validation.
    When set to `true`, the validator doesn't check a required field if its
    context isn't configured for the current issue. When set to `false`, the
    validator requires a field even if its context is invalid. Allowed values:
    `true`, `false`. *  `errorMessage` is the error message to display if the
    user does not provide a value during the transition. A default error message
    will be shown if you don't provide one (Optional).###### Field changed
    ######    {       "ruleKey": "system:validate-field-value",      
    "parameters": {         "ruleType": "fieldChanged",        
    "groupsExemptFromValidation":
    "6862ac20-8672-4f68-896d-4854f5efb79e",         "fieldKey":
    "versions",         "errorMessage": "Affect versions must be modified before
    transition"       }     }Parameters: *  `groupsExemptFromValidation` a
    comma-separated list of group IDs to be exempt from the validation. * 
    `fieldKey` the ID of the field that has changed. For a custom field, it
    would look like `customfield_123`. *  `errorMessage` the error message to
    display if the user does not provide a value during the transition. A
    default error message will be shown if you don't provide one
    (Optional).###### Field has a single value ######    {       "ruleKey":
    "system:validate-field-value",       "parameters": {         "ruleType":
    "fieldHasSingleValue",         "fieldKey": "created",        
    "excludeSubtasks": "true"       }     }Parameters: *  `fieldKey` the ID of
    the field to validate. For a custom field, it would look like
    `customfield_123`. *  `excludeSubtasks` Option to exclude values copied from
    sub-tasks. Allowed values: `true`, `false`.###### Field matches regular
    expression ######    {       "ruleKey": "system:validate-field-value",      
    "parameters": {         "ruleType": "fieldMatchesRegularExpression",        
    "regexp": "[0-9]{4}",         "fieldKey": "description"       }    
    }Parameters: *  `regexp` the regular expression used to validate the
    field\\u2019s content. *  `fieldKey` the ID of the field to validate. For a
    custom field, it would look like `customfield_123`.###### Date field
    comparison ######    {       "ruleKey": "system:validate-field-value",      
    "parameters": {         "ruleType": "dateFieldComparison",        
    "date1FieldKey": "duedate",         "date2FieldKey":
    "customfield_10054",         "includeTime": "true",        
    "conditionSelected": ">="       }     }Parameters: *  `date1FieldKey` the ID
    of the first field to compare. For a custom field, it would look like
    `customfield_123`. *  `date2FieldKey` the ID of the second field to compare.
    For a custom field, it would look like `customfield_123`. *  `includeTime`
    if `true`, compares both date and time. Allowed values: `true`, `false`. * 
    `conditionSelected` the condition to compare with. Allowed values: `>`,
    `>=`, `=`, ``, `>=`, `=`, `
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Get Available Workflow Capabilities
      description: >-
        Get the list of workflow capabilities for a specific workflow using either
        the workflow ID, or the project and issue type ID pair. The response
        includes the scope of the workflow, defined as global/project-based, and a
        list of project types that the workflow is scoped to. It also includes all
        rules organised into their broad categories (conditions, validators,
        actions, triggers, screens) as well as the source location
        (Atlassian-provided, Connect, Forge).**[Permissions](#permissions)
        required:** *  *Administer Jira* project permission to access all, including
        global-scoped, workflows *  *Administer projects* project permissions to
        access project-scoped workflowsThe current list of Atlassian-provided
        rules:#### Validators ####A validator rule that checks if a user has the
        required permissions to execute the transition in the workflow.#####
        Permission validator #####A validator rule that checks if a user has the
        required permissions to execute the transition in the workflow.    {      
        "ruleKey": "system:check-permission-validator",       "parameters":
        {         "permissionKey": "ADMINISTER_PROJECTS"       }     }Parameters: * 
        `permissionKey` The permission required to perform the transition. Allowed
        values: [built-in Jira
        permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).#####
        Parent or child blocking validator #####A validator to block the child
        issue\\u2019s transition depending on the parent issue\\u2019s status.   
        {       "ruleKey" : "system:parent-or-child-blocking-validator"      
        "parameters" : {         "blocker" : "PARENT"         "statusIds" :
        "1,2,3"       }     }Parameters: *  `blocker` currently only supports
        `PARENT`. *  `statusIds` a comma-separated list of status IDs.##### Previous
        status validator #####A validator that checks if an issue has transitioned
        through specified previous status(es) before allowing the current transition
        to occur.    {       "ruleKey": "system:previous-status-validator",      
        "parameters": {         "previousStatusIds": "10014",        
        "mostRecentStatusOnly": "true"       }     }Parameters: * 
        `previousStatusIds` a comma-separated list of status IDs, currently only
        support one ID. *  `mostRecentStatusOnly` when `true` only considers the
        most recent status for the condition evaluation. Allowed values: `true`,
        `false`.##### Validate a field value #####A validation that ensures a
        specific field's value meets the defined criteria before allowing an issue
        to transition in the workflow.Depending on the rule type, the result will
        vary:###### Field required ######    {       "ruleKey":
        "system:validate-field-value",       "parameters": {         "ruleType":
        "fieldRequired",         "fieldsRequired": "assignee",        
        "ignoreContext": "true",         "errorMessage": "An assignee must be
        set!"       }     }Parameters: *  `fieldsRequired` the ID of the field that
        is required. For a custom field, it would look like `customfield_123`. * 
        `ignoreContext` controls the impact of context settings on field validation.
        When set to `true`, the validator doesn't check a required field if its
        context isn't configured for the current issue. When set to `false`, the
        validator requires a field even if its context is invalid. Allowed values:
        `true`, `false`. *  `errorMessage` is the error message to display if the
        user does not provide a value during the transition. A default error message
        will be shown if you don't provide one (Optional).###### Field changed
        ######    {       "ruleKey": "system:validate-field-value",      
        "parameters": {         "ruleType": "fieldChanged",        
        "groupsExemptFromValidation":
        "6862ac20-8672-4f68-896d-4854f5efb79e",         "fieldKey":
        "versions",         "errorMessage": "Affect versions must be modified before
        transition"       }     }Parameters: *  `groupsExemptFromValidation` a
        comma-separated list of group IDs to be exempt from the validation. * 
        `fieldKey` the ID of the field that has changed. For a custom field, it
        would look like `customfield_123`. *  `errorMessage` the error message to
        display if the user does not provide a value during the transition. A
        default error message will be shown if you don't provide one
        (Optional).###### Field has a single value ######    {       "ruleKey":
        "system:validate-field-value",       "parameters": {         "ruleType":
        "fieldHasSingleValue",         "fieldKey": "created",        
        "excludeSubtasks": "true"       }     }Parameters: *  `fieldKey` the ID of
        the field to validate. For a custom field, it would look like
        `customfield_123`. *  `excludeSubtasks` Option to exclude values copied from
        sub-tasks. Allowed values: `true`, `false`.###### Field matches regular
        expression ######    {       "ruleKey": "system:validate-field-value",      
        "parameters": {         "ruleType": "fieldMatchesRegularExpression",        
        "regexp": "[0-9]{4}",         "fieldKey": "description"       }    
        }Parameters: *  `regexp` the regular expression used to validate the
        field\\u2019s content. *  `fieldKey` the ID of the field to validate. For a
        custom field, it would look like `customfield_123`.###### Date field
        comparison ######    {       "ruleKey": "system:validate-field-value",      
        "parameters": {         "ruleType": "dateFieldComparison",        
        "date1FieldKey": "duedate",         "date2FieldKey":
        "customfield_10054",         "includeTime": "true",        
        "conditionSelected": ">="       }     }Parameters: *  `date1FieldKey` the ID
        of the first field to compare. For a custom field, it would look like
        `customfield_123`. *  `date2FieldKey` the ID of the second field to compare.
        For a custom field, it would look like `customfield_123`. *  `includeTime`
        if `true`, compares both date and time. Allowed values: `true`, `false`. * 
        `conditionSelected` the condition to compare with. Allowed values: `>`,
        `>=`, `=`, ``, `>=`, `=`, `
    paths:
      /rest/api/3/workflows/capabilities:
        get:
          summary: Get Available Workflow Capabilities
          description: >-
            Get the list of workflow capabilities for a specific workflow using
            either the workflow ID, or the project and issue type ID pair. The
            response includes the scope of the workflow, defined as
            global/project-based, and a list of project types that the workflow is
            scoped to. It also includes all rules organised into their broad
            categories (conditions, validators, actions, triggers, screens) as well
            as the source location (Atlassian-provided, Connect,
            Forge).**[Permissions](#permissions) required:** *  *Administer Jira*
            project permission to access all, including global-scoped, workflows * 
            *Administer projects* project permissions to access project-scoped
            workflowsThe current list of Atlassian-provided rules:#### Validators
            ####A validator rule that checks if a user has the required permissions
            to execute the transition in the workflow.##### Permission validator
            #####A validator rule that checks if a user has the required permissions
            to execute the transition in the workflow.    {       "ruleKey":
            "system:check-permission-validator",       "parameters": {        
            "permissionKey": "ADMINISTER_PROJECTS"       }     }Parameters: * 
            `permissionKey` The permission required to perform the transition.
            Allowed values: [built-in Jira
            permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).#####
            Parent or child blocking validator #####A validator to block the child
            issue\\u2019s transition depending on the parent issue\\u2019s
            status.    {       "ruleKey" :
            "system:parent-or-child-blocking-validator"       "parameters" :
            {         "blocker" : "PARENT"         "statusIds" : "1,2,3"       }    
            }Parameters: *  `blocker` currently only supports `PARENT`. * 
            `statusIds` a comma-separated list of status IDs.##### Previous status
            validator #####A validator that checks if an issue has transitioned
            through specified previous status(es) before allowing the current
            transition to occur.    {       "ruleKey":
            "system:previous-status-validator",       "parameters": {        
            "previousStatusIds": "10014",         "mostRecentStatusOnly":
            "true"       }     }Parameters: *  `previousStatusIds` a comma-separated
            list of status IDs, currently only support one ID. * 
            `mostRecentStatusOnly` when `true` only considers the most recent status
            for the condition evaluation. Allowed values: `true`, `false`.#####
            Validate a field value #####A validation that ensures a specific field's
            value meets the defined criteria before allowing an issue to transition
            in the workflow.Depending on the rule type, the result will vary:######
            Field required ######    {       "ruleKey":
            "system:validate-field-value",       "parameters": {         "ruleType":
            "fieldRequired",         "fieldsRequired": "assignee",        
            "ignoreContext": "true",         "errorMessage": "An assignee must be
            set!"       }     }Parameters: *  `fieldsRequired` the ID of the field
            that is required. For a custom field, it would look like
            `customfield_123`. *  `ignoreContext` controls the impact of context
            settings on field validation. When set to `true`, the validator doesn't
            check a required field if its context isn't configured for the current
            issue. When set to `false`, the validator requires a field even if its
            context is invalid. Allowed values: `true`, `false`. *  `errorMessage`
            is the error message to display if the user does not provide a value
            during the transition. A default error message will be shown if you
            don't provide one (Optional).###### Field changed ######    {      
            "ruleKey": "system:validate-field-value",       "parameters": {        
            "ruleType": "fieldChanged",         "groupsExemptFromValidation":
            "6862ac20-8672-4f68-896d-4854f5efb79e",         "fieldKey":
            "versions",         "errorMessage": "Affect versions must be modified
            before transition"       }     }Parameters: * 
            `groupsExemptFromValidation` a comma-separated list of group IDs to be
            exempt from the validation. *  `fieldKey` the ID of the field that has
            changed. For a custom field, it would look like `customfield_123`. * 
            `errorMessage` the error message to display if the user does not provide
            a value during the transition. A default error message will be shown if
            you don't provide one (Optional).###### Field has a single value
            ######    {       "ruleKey": "system:validate-field-value",      
            "parameters": {         "ruleType": "fieldHasSingleValue",        
            "fieldKey": "created",         "excludeSubtasks": "true"       }    
            }Parameters: *  `fieldKey` the ID of the field to validate. For a custom
            field, it would look like `customfield_123`. *  `excludeSubtasks` Option
            to exclude values copied from sub-tasks. Allowed values: `true`,
            `false`.###### Field matches regular expression ######    {      
            "ruleKey": "system:validate-field-value",       "parameters": {        
            "ruleType": "fieldMatchesRegularExpression",         "regexp":
            "[0-9]{4}",         "fieldKey": "description"       }     }Parameters:
            *  `regexp` the regular expression used to validate the field\\u2019s
            content. *  `fieldKey` the ID of the field to validate. For a custom
            field, it would look like `customfield_123`.###### Date field comparison
            ######    {       "ruleKey": "system:validate-field-value",      
            "parameters": {         "ruleType": "dateFieldComparison",        
            "date1FieldKey": "duedate",         "date2FieldKey":
            "customfield_10054",         "includeTime": "true",        
            "conditionSelected": ">="       }     }Parameters: *  `date1FieldKey`
            the ID of the first field to compare. For a custom field, it would look
            like `customfield_123`. *  `date2FieldKey` the ID of the second field to
            compare. For a custom field, it would look like `customfield_123`. * 
            `includeTime` if `true`, compares both date and time. Allowed values:
            `true`, `false`. *  `conditionSelected` the condition to compare with.
            Allowed values: `>`, `>=`, `=`, ``, `>=`, `=`, `
          operationId: workflowCapabilities
          responses:
            '401':
              description: >-
                Returned if the authentication credentials are incorrect or missing,
                or the caller doesn't have permissions to perform the operation.
