apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Update A Snippet
  description: >-
    Used to update a snippet. Use this to add and delete files and tochange a
    snippet's title.To update a snippet, one can either PUT a full snapshot, or
    only theparts that need to be changed.The contract for PUT on this API is
    that properties missing from therequest remain untouched so that snippets
    can be efficientlymanipulated with differential payloads.To delete a
    property (e.g. the title, or a file), include its name inthe request, but
    omit its value (use `null`).As in Git, explicit renaming of files is not
    supported. Instead, torename a file, delete it and add it again under
    another name. This canbe done atomically in a single request. Rename
    detection is left tothe SCM.PUT supports three different content types for
    both request andresponse bodies:* `application/json`* `multipart/related`*
    `multipart/form-data`The content type used for the request body can be
    different than thatused for the response. Content types are specified using
    standard HTTPheaders.Use the `Content-Type` and `Accept` headers to select
    the desiredrequest and response format.application/json-As with creation and
    retrieval, the content type determines whatproperties can be manipulated.
    `application/json` does not supportfile contents and is therefore limited to
    a snippet's meta data.To update the title, without changing any of its
    files:    $ curl -X POST -H "Content-Type: application/json"
    https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d
    '{"title": "Updated title"}'To delete the title:    $ curl -X POST -H
    "Content-Type: application/json"
    https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d
    '{"title": null}'Not all parts of a snippet can be manipulated. The owner
    and creatorfor instance are immutable.multipart/related--`multipart/related`
    can be used to manipulate all of a snippet'sproperties. The body is
    identical to a POST. properties omitted fromthe request are left unchanged.
    Since the `start` part contains JSON,the mechanism for manipulating the
    snippet's meta data is identicalto `application/json` requests.To update one
    of a snippet's file contents, while also changing itstitle:    PUT
    /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 288    Content-Type:
    multipart/related; start="snippet";
    boundary="===============1438169132528273974=="    MIME-Version: 1.0   
    --===============1438169132528273974==    Content-Type: application/json;
    charset="utf-8"    MIME-Version: 1.0    Content-ID: snippet    {     
    "title": "My updated snippet",      "files": {          "foo.txt": {}       
    }    }    --===============1438169132528273974==    Content-Type:
    text/plain; charset="us-ascii"    MIME-Version: 1.0   
    Content-Transfer-Encoding: 7bit    Content-ID: "foo.txt"   
    Content-Disposition: attachment; filename="foo.txt"    Updated file
    contents.    --===============1438169132528273974==--Here only the parts
    that are changed are included in the body. Theother files remain
    untouched.Note the use of the `files` list in the JSON part. This list
    containsthe files that are being manipulated. This list should
    havecorresponding multiparts in the request that contain the new contentsof
    these files.If a filename in the `files` list does not have a corresponding
    part,it will be deleted from the snippet, as shown below:    PUT
    /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 188    Content-Type:
    multipart/related; start="snippet";
    boundary="===============1438169132528273974=="    MIME-Version: 1.0   
    --===============1438169132528273974==    Content-Type: application/json;
    charset="utf-8"    MIME-Version: 1.0    Content-ID: snippet    {     
    "files": {        "image.png": {}      }    }   
    --===============1438169132528273974==--To simulate a rename, delete a file
    and add the same file underanother name:    PUT /2.0/snippets/evzijst/kypj
    HTTP/1.1    Content-Length: 212    Content-Type: multipart/related;
    start="snippet"; boundary="===============1438169132528273974=="   
    MIME-Version: 1.0    --===============1438169132528273974==    Content-Type:
    application/json; charset="utf-8"    MIME-Version: 1.0    Content-ID:
    snippet    {        "files": {          "foo.txt": {},          "bar.txt":
    {}        }    }    --===============1438169132528273974==    Content-Type:
    text/plain; charset="us-ascii"    MIME-Version: 1.0   
    Content-Transfer-Encoding: 7bit    Content-ID: "bar.txt"   
    Content-Disposition: attachment; filename="bar.txt"    foo   
    --===============1438169132528273974==--multipart/form-data--Again, one can
    also use `multipart/form-data` to manipulate filecontents and meta data
    atomically.    $ curl -X PUT
    http://localhost:12345/2.0/snippets/evzijst/kypj             -F title="My
    updated snippet" -F file=@foo.txt    PUT /2.0/snippets/evzijst/kypj
    HTTP/1.1    Content-Length: 351    Content-Type: multipart/form-data;
    boundary=-63a4b224c59f    63a4b224c59f    Content-Disposition: form-data;
    name="file"; filename="foo.txt"    Content-Type: text/plain    foo   
    63a4b224c59f    Content-Disposition: form-data; name="title"    My updated
    snippet    63a4b224c59fTo delete a file, omit its contents while including
    its name in the`files` field:    $ curl -X PUT
    https://api.bitbucket.org/2.0/snippets/evzijst/kypj -F files=image.png   
    PUT /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 149   
    Content-Type: multipart/form-data; boundary=-ef8871065a86    ef8871065a86   
    Content-Disposition: form-data; name="files"    image.png   
    ef8871065a86--The explicit use of the `files` element in `multipart/related`
    and`multipart/form-data` is only required when deleting files.The default
    mode of operation is for file parts to be processed,regardless of whether or
    not they are listed in `files`, as aconvenience to the client.
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Update A Snippet
      description: >-
        Used to update a snippet. Use this to add and delete files and tochange a
        snippet's title.To update a snippet, one can either PUT a full snapshot, or
        only theparts that need to be changed.The contract for PUT on this API is
        that properties missing from therequest remain untouched so that snippets
        can be efficientlymanipulated with differential payloads.To delete a
        property (e.g. the title, or a file), include its name inthe request, but
        omit its value (use `null`).As in Git, explicit renaming of files is not
        supported. Instead, torename a file, delete it and add it again under
        another name. This canbe done atomically in a single request. Rename
        detection is left tothe SCM.PUT supports three different content types for
        both request andresponse bodies:* `application/json`* `multipart/related`*
        `multipart/form-data`The content type used for the request body can be
        different than thatused for the response. Content types are specified using
        standard HTTPheaders.Use the `Content-Type` and `Accept` headers to select
        the desiredrequest and response format.application/json-As with creation and
        retrieval, the content type determines whatproperties can be manipulated.
        `application/json` does not supportfile contents and is therefore limited to
        a snippet's meta data.To update the title, without changing any of its
        files:    $ curl -X POST -H "Content-Type: application/json"
        https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d
        '{"title": "Updated title"}'To delete the title:    $ curl -X POST -H
        "Content-Type: application/json"
        https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d
        '{"title": null}'Not all parts of a snippet can be manipulated. The owner
        and creatorfor instance are immutable.multipart/related--`multipart/related`
        can be used to manipulate all of a snippet'sproperties. The body is
        identical to a POST. properties omitted fromthe request are left unchanged.
        Since the `start` part contains JSON,the mechanism for manipulating the
        snippet's meta data is identicalto `application/json` requests.To update one
        of a snippet's file contents, while also changing itstitle:    PUT
        /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 288    Content-Type:
        multipart/related; start="snippet";
        boundary="===============1438169132528273974=="    MIME-Version: 1.0   
        --===============1438169132528273974==    Content-Type: application/json;
        charset="utf-8"    MIME-Version: 1.0    Content-ID: snippet    {     
        "title": "My updated snippet",      "files": {          "foo.txt": {}       
        }    }    --===============1438169132528273974==    Content-Type:
        text/plain; charset="us-ascii"    MIME-Version: 1.0   
        Content-Transfer-Encoding: 7bit    Content-ID: "foo.txt"   
        Content-Disposition: attachment; filename="foo.txt"    Updated file
        contents.    --===============1438169132528273974==--Here only the parts
        that are changed are included in the body. Theother files remain
        untouched.Note the use of the `files` list in the JSON part. This list
        containsthe files that are being manipulated. This list should
        havecorresponding multiparts in the request that contain the new contentsof
        these files.If a filename in the `files` list does not have a corresponding
        part,it will be deleted from the snippet, as shown below:    PUT
        /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 188    Content-Type:
        multipart/related; start="snippet";
        boundary="===============1438169132528273974=="    MIME-Version: 1.0   
        --===============1438169132528273974==    Content-Type: application/json;
        charset="utf-8"    MIME-Version: 1.0    Content-ID: snippet    {     
        "files": {        "image.png": {}      }    }   
        --===============1438169132528273974==--To simulate a rename, delete a file
        and add the same file underanother name:    PUT /2.0/snippets/evzijst/kypj
        HTTP/1.1    Content-Length: 212    Content-Type: multipart/related;
        start="snippet"; boundary="===============1438169132528273974=="   
        MIME-Version: 1.0    --===============1438169132528273974==    Content-Type:
        application/json; charset="utf-8"    MIME-Version: 1.0    Content-ID:
        snippet    {        "files": {          "foo.txt": {},          "bar.txt":
        {}        }    }    --===============1438169132528273974==    Content-Type:
        text/plain; charset="us-ascii"    MIME-Version: 1.0   
        Content-Transfer-Encoding: 7bit    Content-ID: "bar.txt"   
        Content-Disposition: attachment; filename="bar.txt"    foo   
        --===============1438169132528273974==--multipart/form-data--Again, one can
        also use `multipart/form-data` to manipulate filecontents and meta data
        atomically.    $ curl -X PUT
        http://localhost:12345/2.0/snippets/evzijst/kypj             -F title="My
        updated snippet" -F file=@foo.txt    PUT /2.0/snippets/evzijst/kypj
        HTTP/1.1    Content-Length: 351    Content-Type: multipart/form-data;
        boundary=-63a4b224c59f    63a4b224c59f    Content-Disposition: form-data;
        name="file"; filename="foo.txt"    Content-Type: text/plain    foo   
        63a4b224c59f    Content-Disposition: form-data; name="title"    My updated
        snippet    63a4b224c59fTo delete a file, omit its contents while including
        its name in the`files` field:    $ curl -X PUT
        https://api.bitbucket.org/2.0/snippets/evzijst/kypj -F files=image.png   
        PUT /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 149   
        Content-Type: multipart/form-data; boundary=-ef8871065a86    ef8871065a86   
        Content-Disposition: form-data; name="files"    image.png   
        ef8871065a86--The explicit use of the `files` element in `multipart/related`
        and`multipart/form-data` is only required when deleting files.The default
        mode of operation is for file parts to be processed,regardless of whether or
        not they are listed in `files`, as aconvenience to the client.
    paths:
      /snippets/{workspace}/{encoded_id}:
        put:
          summary: Update A Snippet
          description: >-
            Used to update a snippet. Use this to add and delete files and tochange
            a snippet's title.To update a snippet, one can either PUT a full
            snapshot, or only theparts that need to be changed.The contract for PUT
            on this API is that properties missing from therequest remain untouched
            so that snippets can be efficientlymanipulated with differential
            payloads.To delete a property (e.g. the title, or a file), include its
            name inthe request, but omit its value (use `null`).As in Git, explicit
            renaming of files is not supported. Instead, torename a file, delete it
            and add it again under another name. This canbe done atomically in a
            single request. Rename detection is left tothe SCM.PUT supports three
            different content types for both request andresponse bodies:*
            `application/json`* `multipart/related`* `multipart/form-data`The
            content type used for the request body can be different than thatused
            for the response. Content types are specified using standard
            HTTPheaders.Use the `Content-Type` and `Accept` headers to select the
            desiredrequest and response format.application/json-As with creation and
            retrieval, the content type determines whatproperties can be
            manipulated. `application/json` does not supportfile contents and is
            therefore limited to a snippet's meta data.To update the title, without
            changing any of its files:    $ curl -X POST -H "Content-Type:
            application/json"
            https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d
            '{"title": "Updated title"}'To delete the title:    $ curl -X POST -H
            "Content-Type: application/json"
            https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d
            '{"title": null}'Not all parts of a snippet can be manipulated. The
            owner and creatorfor instance are
            immutable.multipart/related--`multipart/related` can be used to
            manipulate all of a snippet'sproperties. The body is identical to a
            POST. properties omitted fromthe request are left unchanged. Since the
            `start` part contains JSON,the mechanism for manipulating the snippet's
            meta data is identicalto `application/json` requests.To update one of a
            snippet's file contents, while also changing itstitle:    PUT
            /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 288   
            Content-Type: multipart/related; start="snippet";
            boundary="===============1438169132528273974=="    MIME-Version: 1.0   
            --===============1438169132528273974==    Content-Type:
            application/json; charset="utf-8"    MIME-Version: 1.0    Content-ID:
            snippet    {      "title": "My updated snippet",      "files":
            {          "foo.txt": {}        }    }   
            --===============1438169132528273974==    Content-Type: text/plain;
            charset="us-ascii"    MIME-Version: 1.0    Content-Transfer-Encoding:
            7bit    Content-ID: "foo.txt"    Content-Disposition: attachment;
            filename="foo.txt"    Updated file contents.   
            --===============1438169132528273974==--Here only the parts that are
            changed are included in the body. Theother files remain untouched.Note
            the use of the `files` list in the JSON part. This list containsthe
            files that are being manipulated. This list should havecorresponding
            multiparts in the request that contain the new contentsof these files.If
            a filename in the `files` list does not have a corresponding part,it
            will be deleted from the snippet, as shown below:    PUT
            /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 188   
            Content-Type: multipart/related; start="snippet";
            boundary="===============1438169132528273974=="    MIME-Version: 1.0   
            --===============1438169132528273974==    Content-Type:
            application/json; charset="utf-8"    MIME-Version: 1.0    Content-ID:
            snippet    {      "files": {        "image.png": {}      }    }   
            --===============1438169132528273974==--To simulate a rename, delete a
            file and add the same file underanother name:    PUT
            /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 212   
            Content-Type: multipart/related; start="snippet";
            boundary="===============1438169132528273974=="    MIME-Version: 1.0   
            --===============1438169132528273974==    Content-Type:
            application/json; charset="utf-8"    MIME-Version: 1.0    Content-ID:
            snippet    {        "files": {          "foo.txt": {},         
            "bar.txt": {}        }    }    --===============1438169132528273974==   
            Content-Type: text/plain; charset="us-ascii"    MIME-Version: 1.0   
            Content-Transfer-Encoding: 7bit    Content-ID: "bar.txt"   
            Content-Disposition: attachment; filename="bar.txt"    foo   
            --===============1438169132528273974==--multipart/form-data--Again, one
            can also use `multipart/form-data` to manipulate filecontents and meta
            data atomically.    $ curl -X PUT
            http://localhost:12345/2.0/snippets/evzijst/kypj             -F
            title="My updated snippet" -F file=@foo.txt    PUT
            /2.0/snippets/evzijst/kypj HTTP/1.1    Content-Length: 351   
            Content-Type: multipart/form-data; boundary=-63a4b224c59f   
            63a4b224c59f    Content-Disposition: form-data; name="file";
            filename="foo.txt"    Content-Type: text/plain    foo    63a4b224c59f   
            Content-Disposition: form-data; name="title"    My updated snippet   
            63a4b224c59fTo delete a file, omit its contents while including its name
            in the`files` field:    $ curl -X PUT
            https://api.bitbucket.org/2.0/snippets/evzijst/kypj -F
            files=image.png    PUT /2.0/snippets/evzijst/kypj HTTP/1.1   
            Content-Length: 149    Content-Type: multipart/form-data;
            boundary=-ef8871065a86    ef8871065a86    Content-Disposition:
            form-data; name="files"    image.png    ef8871065a86--The explicit use
            of the `files` element in `multipart/related` and`multipart/form-data`
            is only required when deleting files.The default mode of operation is
            for file parts to be processed,regardless of whether or not they are
            listed in `files`, as aconvenience to the client.
          operationId: updateasnippet
          responses:
            '404':
              description: If the snippet does not exist.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/error'
                multipart/related:
                  schema:
                    $ref: '#/components/schemas/error'
                multipart/form-data:
                  schema:
                    $ref: '#/components/schemas/error'
