apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: microsoftAzureRoutePostroutematrix
  description: >-
    <br><br>**Applies to**: S1 pricing tier.<br><br>The Matrix Routing service
    allows calculation of a matrix of route summaries for a set of routes
    defined by origin and destination locations by using an asynchronous (async)
    or synchronous (sync) POST request. For every given origin, the service
    calculates the cost of routing from that origin to every given destination.
    The set of origins and the set of destinations can be thought of as the
    column and row headers of a table and each cell in the table contains the
    costs of routing from the origin to the destination for that cell. As an
    example, let's say a food delivery company has 20 drivers and they need to
    find the closest driver to pick up the delivery from the restaurant. To
    solve this use case, they can call Matrix Route API.<br><br><br>For each
    route, the travel times and distances are returned. You can use the computed
    costs to determine which detailed routes to calculate using the Route
    Directions API.<br><br><br>The maximum size of a matrix for async request is
    **700** and for sync request it's **100** (the number of origins multiplied
    by the number of destinations).<br><br><br><br>### Submit Synchronous Route
    Matrix Request<br>If your scenario requires synchronous requests and the
    maximum size of the matrix is less than or equal to 100, you might want to
    make synchronous request. The maximum size of a matrix for this API is
    **100** (the number of origins multiplied by the number of destinations).
    With that constraint in mind, examples of possible matrix dimensions are:
    10x10, 6x8, 9x8 (it does not need to be square).<br><br>```<br>POST
    https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}<br>```<br><br>###
    Submit Asynchronous Route Matrix Request<br>The Asynchronous API is
    appropriate for processing big volumes of relatively complex routing
    requests. When you make a request by using async request, by default the
    service returns a 202 response code along a redirect URL in the Location
    field of the response header. This URL should be checked periodically until
    the response data or error information is available. If `waitForResults`
    parameter in the request is set to true, user will get a 200 response if the
    request is finished under 120 seconds.<br><br><br>The maximum size of a
    matrix for this API is **700** (the number of origins multiplied by the
    number of destinations). With that constraint in mind, examples of possible
    matrix dimensions are: 50x10, 10x10, 28x25. 10x70 (it does not need to be
    square).<br><br><br>The asynchronous responses are stored for **14** days.
    The redirect URL returns a 404 response if used after the expiration
    period.<br><br><br><br><br>```<br>POST
    https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}<br>```<br><br>Here's
    a typical sequence of asynchronous operations:<br>1. Client sends a Route
    Matrix POST request to Azure Maps<br><br>2. The server will respond with one
    of the following:<br><br>    > HTTP `202 Accepted` -  Route Matrix request
    has been accepted.<br><br>    > HTTP `Error` - There was an error processing
    your Route Matrix request. This could either be a 400 Bad Request or any
    other Error status code.<br><br><br>3. If the Matrix Route request was
    accepted successfully, the Location header in the response contains the URL
    to download the results of the request. This status URI looks like the
    following:<br><br>  ```<br>    GET
    https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}<br> 
    ```<br><br><br>4. Client issues a GET request on the download URL obtained
    in Step 3 to download the results<br><br>### Download Sync Results<br>When
    you make a POST request for Route Matrix Sync API, the service returns 200
    response code for successful request and a response array. The response body
    will contain the data and there will be no possibility to retrieve the
    results later.<br><br>### Download Async Results<br>When a request issues a
    `202 Accepted` response, the request is being processed using our async
    pipeline. You will be given a URL to check the progress of your  async
    request in the location header of the response. This status URI looks like
    the following:<br>```<br>  GET
    https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}<br>```<br><br>The
    URL provided by the location header will return the following responses when
    a `GET` request is issued.<br><br>  > HTTP `202 Accepted` - Matrix request
    was accepted but is still being processed. Please try again in some
    time.<br><br>  > HTTP `200 OK` - Matrix request successfully processed. The
    response body contains all of the results.
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Post Route Matrix Format
      description: >-
        <br><br>**Applies to**: S1 pricing tier.<br><br>The Matrix Routing service
        allows calculation of a matrix of route summaries for a set of routes
        defined by origin and destination locations by using an asynchronous (async)
        or synchronous (sync) POST request. For every given origin, the service
        calculates the cost of routing from that origin to every given destination.
        The set of origins and the set of destinations can be thought of as the
        column and row headers of a table and each cell in the table contains the
        costs of routing from the origin to the destination for that cell. As an
        example, let's say a food delivery company has 20 drivers and they need to
        find the closest driver to pick up the delivery from the restaurant. To
        solve this use case, they can call Matrix Route API.<br><br><br>For each
        route, the travel times and distances are returned. You can use the computed
        costs to determine which detailed routes to calculate using the Route
        Directions API.<br><br><br>The maximum size of a matrix for async request is
        **700** and for sync request it's **100** (the number of origins multiplied
        by the number of destinations).<br><br><br><br>### Submit Synchronous Route
        Matrix Request<br>If your scenario requires synchronous requests and the
        maximum size of the matrix is less than or equal to 100, you might want to
        make synchronous request. The maximum size of a matrix for this API is
        **100** (the number of origins multiplied by the number of destinations).
        With that constraint in mind, examples of possible matrix dimensions are:
        10x10, 6x8, 9x8 (it does not need to be square).<br><br>```<br>POST
        https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}<br>```<br><br>###
        Submit Asynchronous Route Matrix Request<br>The Asynchronous API is
        appropriate for processing big volumes of relatively complex routing
        requests. When you make a request by using async request, by default the
        service returns a 202 response code along a redirect URL in the Location
        field of the response header. This URL should be checked periodically until
        the response data or error information is available. If `waitForResults`
        parameter in the request is set to true, user will get a 200 response if the
        request is finished under 120 seconds.<br><br><br>The maximum size of a
        matrix for this API is **700** (the number of origins multiplied by the
        number of destinations). With that constraint in mind, examples of possible
        matrix dimensions are: 50x10, 10x10, 28x25. 10x70 (it does not need to be
        square).<br><br><br>The asynchronous responses are stored for **14** days.
        The redirect URL returns a 404 response if used after the expiration
        period.<br><br><br><br><br>```<br>POST
        https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}<br>```<br><br>Here's
        a typical sequence of asynchronous operations:<br>1. Client sends a Route
        Matrix POST request to Azure Maps<br><br>2. The server will respond with one
        of the following:<br><br>    > HTTP `202 Accepted` -  Route Matrix request
        has been accepted.<br><br>    > HTTP `Error` - There was an error processing
        your Route Matrix request. This could either be a 400 Bad Request or any
        other Error status code.<br><br><br>3. If the Matrix Route request was
        accepted successfully, the Location header in the response contains the URL
        to download the results of the request. This status URI looks like the
        following:<br><br>  ```<br>    GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}<br> 
        ```<br><br><br>4. Client issues a GET request on the download URL obtained
        in Step 3 to download the results<br><br>### Download Sync Results<br>When
        you make a POST request for Route Matrix Sync API, the service returns 200
        response code for successful request and a response array. The response body
        will contain the data and there will be no possibility to retrieve the
        results later.<br><br>### Download Async Results<br>When a request issues a
        `202 Accepted` response, the request is being processed using our async
        pipeline. You will be given a URL to check the progress of your  async
        request in the location header of the response. This status URI looks like
        the following:<br>```<br>  GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}<br>```<br><br>The
        URL provided by the location header will return the following responses when
        a `GET` request is issued.<br><br>  > HTTP `202 Accepted` - Matrix request
        was accepted but is still being processed. Please try again in some
        time.<br><br>  > HTTP `200 OK` - Matrix request successfully processed. The
        response body contains all of the results.
    paths:
      /route/matrix/{format}:
        post:
          summary: Post Route Matrix Format
          description: >-
            <br><br>**Applies to**: S1 pricing tier.<br><br>The Matrix Routing
            service allows calculation of a matrix of route summaries for a set of
            routes defined by origin and destination locations by using an
            asynchronous (async) or synchronous (sync) POST request. For every given
            origin, the service calculates the cost of routing from that origin to
            every given destination. The set of origins and the set of destinations
            can be thought of as the column and row headers of a table and each cell
            in the table contains the costs of routing from the origin to the
            destination for that cell. As an example, let's say a food delivery
            company has 20 drivers and they need to find the closest driver to pick
            up the delivery from the restaurant. To solve this use case, they can
            call Matrix Route API.<br><br><br>For each route, the travel times and
            distances are returned. You can use the computed costs to determine
            which detailed routes to calculate using the Route Directions
            API.<br><br><br>The maximum size of a matrix for async request is
            **700** and for sync request it's **100** (the number of origins
            multiplied by the number of destinations).<br><br><br><br>### Submit
            Synchronous Route Matrix Request<br>If your scenario requires
            synchronous requests and the maximum size of the matrix is less than or
            equal to 100, you might want to make synchronous request. The maximum
            size of a matrix for this API is **100** (the number of origins
            multiplied by the number of destinations). With that constraint in mind,
            examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not
            need to be square).<br><br>```<br>POST
            https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}<br>```<br><br>###
            Submit Asynchronous Route Matrix Request<br>The Asynchronous API is
            appropriate for processing big volumes of relatively complex routing
            requests. When you make a request by using async request, by default the
            service returns a 202 response code along a redirect URL in the Location
            field of the response header. This URL should be checked periodically
            until the response data or error information is available. If
            `waitForResults` parameter in the request is set to true, user will get
            a 200 response if the request is finished under 120
            seconds.<br><br><br>The maximum size of a matrix for this API is **700**
            (the number of origins multiplied by the number of destinations). With
            that constraint in mind, examples of possible matrix dimensions are:
            50x10, 10x10, 28x25. 10x70 (it does not need to be
            square).<br><br><br>The asynchronous responses are stored for **14**
            days. The redirect URL returns a 404 response if used after the
            expiration period.<br><br><br><br><br>```<br>POST
            https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}<br>```<br><br>Here's
            a typical sequence of asynchronous operations:<br>1. Client sends a
            Route Matrix POST request to Azure Maps<br><br>2. The server will
            respond with one of the following:<br><br>    > HTTP `202 Accepted` - 
            Route Matrix request has been accepted.<br><br>    > HTTP `Error` -
            There was an error processing your Route Matrix request. This could
            either be a 400 Bad Request or any other Error status
            code.<br><br><br>3. If the Matrix Route request was accepted
            successfully, the Location header in the response contains the URL to
            download the results of the request. This status URI looks like the
            following:<br><br>  ```<br>    GET
            https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}<br> 
            ```<br><br><br>4. Client issues a GET request on the download URL
            obtained in Step 3 to download the results<br><br>### Download Sync
            Results<br>When you make a POST request for Route Matrix Sync API, the
            service returns 200 response code for successful request and a response
            array. The response body will contain the data and there will be no
            possibility to retrieve the results later.<br><br>### Download Async
            Results<br>When a request issues a `202 Accepted` response, the request
            is being processed using our async pipeline. You will be given a URL to
            check the progress of your  async request in the location header of the
            response. This status URI looks like the following:<br>```<br>  GET
            https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}<br>```<br><br>The
            URL provided by the location header will return the following responses
            when a `GET` request is issued.<br><br>  > HTTP `202 Accepted` - Matrix
            request was accepted but is still being processed. Please try again in
            some time.<br><br>  > HTTP `200 OK` - Matrix request successfully
            processed. The response body contains all of the results.
          operationId: microsoftAzureRoutePostroutematrix
          responses:
            '500':
              $ref: '#/responses/500'
