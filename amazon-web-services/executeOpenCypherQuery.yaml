apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: executeopencypherquery
  description: >-
    Executes an openCypher query. See Accessing the Neptune Graph with
    openCypher for more information. Neptune supports building graph
    applications using openCypher, which is currently one of the most popular
    query languages among developers working with graph databases. Developers,
    business analysts, and data scientists like openCypher's declarative,
    SQL-inspired syntax because it provides a familiar structure in which to
    querying property graphs. The openCypher language was originally developed
    by Neo4j, then open-sourced in 2015 and contributed to the openCypher
    project under an Apache 2 open-source license. Note that when invoking this
    operation in a Neptune cluster that has IAM authentication enabled, the IAM
    user or role making the request must have a policy attached that allows one
    of the following IAM actions in that cluster, depending on the query:   
    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery    
    neptune-db:DeleteDataViaQuery    Note also that the
    neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the
    policy document to restrict the use of openCypher queries (see Condition
    keys available in Neptune IAM data-access policy statements).
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Executeopencypherquery
      description: >-
        Executes an openCypher query. See Accessing the Neptune Graph with
        openCypher for more information. Neptune supports building graph
        applications using openCypher, which is currently one of the most popular
        query languages among developers working with graph databases. Developers,
        business analysts, and data scientists like openCypher's declarative,
        SQL-inspired syntax because it provides a familiar structure in which to
        querying property graphs. The openCypher language was originally developed
        by Neo4j, then open-sourced in 2015 and contributed to the openCypher
        project under an Apache 2 open-source license. Note that when invoking this
        operation in a Neptune cluster that has IAM authentication enabled, the IAM
        user or role making the request must have a policy attached that allows one
        of the following IAM actions in that cluster, depending on the query:   
        neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery    
        neptune-db:DeleteDataViaQuery    Note also that the
        neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the
        policy document to restrict the use of openCypher queries (see Condition
        keys available in Neptune IAM data-access policy statements).
    paths:
      /opencypher:
        POST:
          summary: Executeopencypherquery
          description: >-
            Executes an openCypher query. See Accessing the Neptune Graph with
            openCypher for more information. Neptune supports building graph
            applications using openCypher, which is currently one of the most
            popular query languages among developers working with graph databases.
            Developers, business analysts, and data scientists like openCypher's
            declarative, SQL-inspired syntax because it provides a familiar
            structure in which to querying property graphs. The openCypher language
            was originally developed by Neo4j, then open-sourced in 2015 and
            contributed to the openCypher project under an Apache 2 open-source
            license. Note that when invoking this operation in a Neptune cluster
            that has IAM authentication enabled, the IAM user or role making the
            request must have a policy attached that allows one of the following IAM
            actions in that cluster, depending on the query:   
            neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery    
            neptune-db:DeleteDataViaQuery    Note also that the
            neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the
            policy document to restrict the use of openCypher queries (see Condition
            keys available in Neptune IAM data-access policy statements).
          operationId: executeOpenCypherQuery
