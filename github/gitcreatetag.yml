apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Create A Tag Object
  description: >-
    Note that creating a tag object does not create the reference that makes a
    tag in Git. If you want to create an annotated tag in Git, you have to do
    this call to create the tag object, and then
    [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
    the `refs/tags/[tag]` reference. If you want to create a lightweight tag,
    you only have to
    [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
    the tag reference - this call would be unnecessary.**Signature verification
    object**The response will include a `verification` object that describes the
    result of verifying the commit's signature. The following fields are
    included in the `verification` object:| Name | Type | Description || - | - |
    -- || `verified` | `boolean` | Indicates whether GitHub considers the
    signature in this commit to be verified. || `reason` | `string` | The reason
    for verified value. Possible values and their meanings are enumerated in
    table below. || `signature` | `string` | The signature that was extracted
    from the commit. || `payload` | `string` | The value that was signed. |These
    are the possible values for `reason` in the `verification` object:| Value |
    Description || -- | -- || `expired_key` | The key that made the signature is
    expired. || `not_signing_key` | The "signing" flag is not among the usage
    flags in the GPG key that made the signature. || `gpgverify_error` | There
    was an error communicating with the signature verification service. ||
    `gpgverify_unavailable` | The signature verification service is currently
    unavailable. || `unsigned` | The object does not include a signature. ||
    `unknown_signature_type` | A non-PGP signature was found in the commit. ||
    `no_user` | No user was associated with the `committer` email address in the
    commit. || `unverified_email` | The `committer` email address in the commit
    was associated with a user, but the email address is not verified on their
    account. || `bad_email` | The `committer` email address in the commit is not
    included in the identities of the PGP key that made the signature. ||
    `unknown_key` | The key that made the signature has not been registered with
    any user's account. || `malformed_signature` | There was an error parsing
    the signature. || `invalid` | The signature could not be cryptographically
    verified using the key whose key-id was found in the signature. || `valid` |
    None of the above errors applied, so the signature is considered to be
    verified. |
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Create A Tag Object
      description: >-
        Note that creating a tag object does not create the reference that makes a
        tag in Git. If you want to create an annotated tag in Git, you have to do
        this call to create the tag object, and then
        [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
        the `refs/tags/[tag]` reference. If you want to create a lightweight tag,
        you only have to
        [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
        the tag reference - this call would be unnecessary.**Signature verification
        object**The response will include a `verification` object that describes the
        result of verifying the commit's signature. The following fields are
        included in the `verification` object:| Name | Type | Description || - | - |
        -- || `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. || `reason` | `string` | The reason
        for verified value. Possible values and their meanings are enumerated in
        table below. || `signature` | `string` | The signature that was extracted
        from the commit. || `payload` | `string` | The value that was signed. |These
        are the possible values for `reason` in the `verification` object:| Value |
        Description || -- | -- || `expired_key` | The key that made the signature is
        expired. || `not_signing_key` | The "signing" flag is not among the usage
        flags in the GPG key that made the signature. || `gpgverify_error` | There
        was an error communicating with the signature verification service. ||
        `gpgverify_unavailable` | The signature verification service is currently
        unavailable. || `unsigned` | The object does not include a signature. ||
        `unknown_signature_type` | A non-PGP signature was found in the commit. ||
        `no_user` | No user was associated with the `committer` email address in the
        commit. || `unverified_email` | The `committer` email address in the commit
        was associated with a user, but the email address is not verified on their
        account. || `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. ||
        `unknown_key` | The key that made the signature has not been registered with
        any user's account. || `malformed_signature` | There was an error parsing
        the signature. || `invalid` | The signature could not be cryptographically
        verified using the key whose key-id was found in the signature. || `valid` |
        None of the above errors applied, so the signature is considered to be
        verified. |
    paths:
      /repos/{owner}/{repo}/git/tags:
        post:
          summary: Create A Tag Object
          description: >-
            Note that creating a tag object does not create the reference that makes
            a tag in Git. If you want to create an annotated tag in Git, you have to
            do this call to create the tag object, and then
            [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
            the `refs/tags/[tag]` reference. If you want to create a lightweight
            tag, you only have to
            [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
            the tag reference - this call would be unnecessary.**Signature
            verification object**The response will include a `verification` object
            that describes the result of verifying the commit's signature. The
            following fields are included in the `verification` object:| Name | Type
            | Description || - | - | -- || `verified` | `boolean` | Indicates
            whether GitHub considers the signature in this commit to be verified. ||
            `reason` | `string` | The reason for verified value. Possible values and
            their meanings are enumerated in table below. || `signature` | `string`
            | The signature that was extracted from the commit. || `payload` |
            `string` | The value that was signed. |These are the possible values for
            `reason` in the `verification` object:| Value | Description || -- | --
            || `expired_key` | The key that made the signature is expired. ||
            `not_signing_key` | The "signing" flag is not among the usage flags in
            the GPG key that made the signature. || `gpgverify_error` | There was an
            error communicating with the signature verification service. ||
            `gpgverify_unavailable` | The signature verification service is
            currently unavailable. || `unsigned` | The object does not include a
            signature. || `unknown_signature_type` | A non-PGP signature was found
            in the commit. || `no_user` | No user was associated with the
            `committer` email address in the commit. || `unverified_email` | The
            `committer` email address in the commit was associated with a user, but
            the email address is not verified on their account. || `bad_email` | The
            `committer` email address in the commit is not included in the
            identities of the PGP key that made the signature. || `unknown_key` |
            The key that made the signature has not been registered with any user's
            account. || `malformed_signature` | There was an error parsing the
            signature. || `invalid` | The signature could not be cryptographically
            verified using the key whose key-id was found in the signature. ||
            `valid` | None of the above errors applied, so the signature is
            considered to be verified. |
          operationId: gitcreatetag
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    tag:
                      type: string
                      description: >-
                        The tag's name. This is typically a version (e.g.,
                        "v0.0.1").
                    message:
                      type: string
                      description: The tag message.
                    object:
                      type: string
                      description: The SHA of the git object this is tagging.
                    type:
                      type: string
                      description: >-
                        The type of the object we're tagging. Normally this is a
                        `commit` but it can also be a `tree` or a `blob`.
                      enum:
                        - commit
                        - tree
                        - blob
                    tagger:
                      type: object
                      description: >-
                        An object with information about the individual creating the
                        tag.
                      properties:
                        name:
                          type: string
                          description: The name of the author of the tag
                        email:
                          type: string
                          description: The email of the author of the tag
                        date:
                          type: string
                          format: date-time
                          description: >-
                            When this object was tagged. This is a timestamp in [ISO
                            8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                            `YYYY-MM-DDTHH:MM:SSZ`.
                      required:
                        - name
                        - email
                  required:
                    - tag
                    - message
                    - object
                    - type
                examples:
                  default:
                    value:
                      tag: v0.0.1
                      message: initial version
                      object: c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c
                      type: commit
                      tagger:
                        name: Monalisa Octocat
                        email: octocat@github.com
                        date: '2011-06-17T14:53:35-07:00'
          responses:
            '422':
              $ref: '#/components/responses/validation_failed'
