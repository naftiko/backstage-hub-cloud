apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Search Issues And Pull Requests
  description: >-
    Find issues by state and keyword. This method returns up to 100 results [per
    page](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api).When
    searching for issues, you can get text match metadata for the issue
    **title**, issue **body**, and issue **comment body** fields when you pass
    the `text-match` media type. For more details about how to receive
    highlightedsearch results, see [Text match
    metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).For
    example, if you want to find the oldest unresolved Python bugs on Windows.
    Your query might look something like
    this.`q=windows+label:bug+language:python+state:open&sort=created&order=asc`This
    query searches for the keyword `windows`, within any open issue that is
    labeled as `bug`. The search runs across repositories whose primary language
    is Python. The results are sorted by creation date in ascending order, which
    means the oldest issues appear first in the search results.**Note:** For
    requests made by GitHub Apps with a user access token, you can't retrieve a
    combination of issues and pull requests in a single query. Requests that
    don't include the `is:issue` or `is:pull-request` qualifier will receive an
    HTTP `422 Unprocessable Entity` response. To get results for both issues and
    pull requests, you must send separate queries for issues and pull requests.
    For more information about the `is` qualifier, see "[Searching only issues
    or pull
    requests](https://docs.github.com/enterprise-server@3.9/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: Search Issues And Pull Requests
      description: >-
        Find issues by state and keyword. This method returns up to 100 results [per
        page](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api).When
        searching for issues, you can get text match metadata for the issue
        **title**, issue **body**, and issue **comment body** fields when you pass
        the `text-match` media type. For more details about how to receive
        highlightedsearch results, see [Text match
        metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).For
        example, if you want to find the oldest unresolved Python bugs on Windows.
        Your query might look something like
        this.`q=windows+label:bug+language:python+state:open&sort=created&order=asc`This
        query searches for the keyword `windows`, within any open issue that is
        labeled as `bug`. The search runs across repositories whose primary language
        is Python. The results are sorted by creation date in ascending order, which
        means the oldest issues appear first in the search results.**Note:** For
        requests made by GitHub Apps with a user access token, you can't retrieve a
        combination of issues and pull requests in a single query. Requests that
        don't include the `is:issue` or `is:pull-request` qualifier will receive an
        HTTP `422 Unprocessable Entity` response. To get results for both issues and
        pull requests, you must send separate queries for issues and pull requests.
        For more information about the `is` qualifier, see "[Searching only issues
        or pull
        requests](https://docs.github.com/enterprise-server@3.9/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
    paths:
      /search/issues:
        get:
          summary: Search Issues And Pull Requests
          description: >-
            Find issues by state and keyword. This method returns up to 100 results
            [per
            page](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api).When
            searching for issues, you can get text match metadata for the issue
            **title**, issue **body**, and issue **comment body** fields when you
            pass the `text-match` media type. For more details about how to receive
            highlightedsearch results, see [Text match
            metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).For
            example, if you want to find the oldest unresolved Python bugs on
            Windows. Your query might look something like
            this.`q=windows+label:bug+language:python+state:open&sort=created&order=asc`This
            query searches for the keyword `windows`, within any open issue that is
            labeled as `bug`. The search runs across repositories whose primary
            language is Python. The results are sorted by creation date in ascending
            order, which means the oldest issues appear first in the search
            results.**Note:** For requests made by GitHub Apps with a user access
            token, you can't retrieve a combination of issues and pull requests in a
            single query. Requests that don't include the `is:issue` or
            `is:pull-request` qualifier will receive an HTTP `422 Unprocessable
            Entity` response. To get results for both issues and pull requests, you
            must send separate queries for issues and pull requests. For more
            information about the `is` qualifier, see "[Searching only issues or
            pull
            requests](https://docs.github.com/enterprise-server@3.9/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
          operationId: searchissuesandpullrequests
          responses:
            '503':
              $ref: '#/components/responses/service_unavailable'
