apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: List Issues Assigned To The Authenticated User
  description: >-
    List issues assigned to the authenticated user across all visible
    repositories including owned repositories, memberrepositories, and
    organization repositories. You can use the `filter` query parameter to fetch
    issues that are notnecessarily assigned to you.**Note**: GitHub's REST API
    considers every pull request an issue, but not every issue is a pull
    request. For thisreason, "Issues" endpoints may return both issues and pull
    requests in the response. You can identify pull requests bythe
    `pull_request` key. Be aware that the `id` of a pull request returned from
    "Issues" endpoints will be an _issue id_. To find out the pullrequest id,
    use the "[List pull
    requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
    endpoint.This endpoint supports the following custom media types. For more
    information, see "[Media
    types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."-
    **`application/vnd.github.raw+json`**: Returns the raw markdown body.
    Response will include `body`. This is the default if you do not pass any
    specific media type.- **`application/vnd.github.text+json`**: Returns a text
    only representation of the markdown body. Response will include
    `body_text`.- **`application/vnd.github.html+json`**: Returns HTML rendered
    from the body's markdown. Response will include `body_html`.-
    **`application/vnd.github.full+json`**: Returns raw, text, and HTML
    representations. Response will include `body`, `body_text`, and `body_html`.
  tags: []
  links:
    - title: Link
      icon: code
      url: https://example.com
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition: |
    openapi: 3.1.0
    info:
      title: List Issues Assigned To The Authenticated User
      description: >-
        List issues assigned to the authenticated user across all visible
        repositories including owned repositories, memberrepositories, and
        organization repositories. You can use the `filter` query parameter to fetch
        issues that are notnecessarily assigned to you.**Note**: GitHub's REST API
        considers every pull request an issue, but not every issue is a pull
        request. For thisreason, "Issues" endpoints may return both issues and pull
        requests in the response. You can identify pull requests bythe
        `pull_request` key. Be aware that the `id` of a pull request returned from
        "Issues" endpoints will be an _issue id_. To find out the pullrequest id,
        use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."-
        **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.- **`application/vnd.github.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.- **`application/vnd.github.html+json`**: Returns HTML rendered
        from the body's markdown. Response will include `body_html`.-
        **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and `body_html`.
    paths:
      /issues:
        get:
          summary: List Issues Assigned To The Authenticated User
          description: >-
            List issues assigned to the authenticated user across all visible
            repositories including owned repositories, memberrepositories, and
            organization repositories. You can use the `filter` query parameter to
            fetch issues that are notnecessarily assigned to you.**Note**: GitHub's
            REST API considers every pull request an issue, but not every issue is a
            pull request. For thisreason, "Issues" endpoints may return both issues
            and pull requests in the response. You can identify pull requests bythe
            `pull_request` key. Be aware that the `id` of a pull request returned
            from "Issues" endpoints will be an _issue id_. To find out the
            pullrequest id, use the "[List pull
            requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
            endpoint.This endpoint supports the following custom media types. For
            more information, see "[Media
            types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."-
            **`application/vnd.github.raw+json`**: Returns the raw markdown body.
            Response will include `body`. This is the default if you do not pass any
            specific media type.- **`application/vnd.github.text+json`**: Returns a
            text only representation of the markdown body. Response will include
            `body_text`.- **`application/vnd.github.html+json`**: Returns HTML
            rendered from the body's markdown. Response will include `body_html`.-
            **`application/vnd.github.full+json`**: Returns raw, text, and HTML
            representations. Response will include `body`, `body_text`, and
            `body_html`.
          operationId: issueslist
          responses:
            '422':
              $ref: '#/components/responses/validation_failed'
